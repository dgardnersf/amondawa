#!/usr/bin/env ipython --autocall=2 -i
#
# vim: filetype=python
#
# Copyright (c) 2013 Daniel Gardner
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish, dis-
# tribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the fol-
# lowing conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-
# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

from tests.http_writer import *
from tests.stats import Intervals

import time

INTERVALS = Intervals()

HOST = 'amondawa.elasticbeanstalk.com'
PORT = 80
RATE = 100.                  # overall rate (split across NTHREADS)
NTHREADS = 10                # how many threads to use
DURATION = 10                # duration in minutes
BATCH_SIZE = 2               # datapoints per request

WRITERS = []                 # writers

def settings():
  """Show current settings.
  """
  global HOST, PORT, DURATION, RATE, NTHREADS
  print """
host:       %s
port:       %s
duration:   %s
rate:       %s
threads:    %s
batch_size: %s
""" % (HOST, PORT, DURATION, RATE, NTHREADS, BATCH_SIZE)

def commands():
  print """
host         : set host
port         : set port
rate         : set overall rate
threads      : set threads
batch_size   : set per/thread batch size
start        : create threads and start sending 
flush        : flush writers
resume       : resume writers
pause        : pause writers
stop         : terminate writers
status       : show status
streams      : show streams
"""

def host(host):
  global HOST
  HOST = host
  settings()

def port(port):
  global PORT
  PORT = port
  settings()
  
def rate(rate):
  global RATE
  RATE = rate
  settings()

def threads(count):
  global NTHREADS
  NTHREADS = count
  settings()

def batch_size(batch_size):
  global BATCH_SIZE
  BATCH_SIZE = batch_size
  settings()

def start():
  global WRITERS, NTHREADS, RATE, INTERVALS
  if WRITERS: kill()
  WRITERS = [RandomHTTPWriter(HOST, PORT, rate=RATE/NTHREADS, 
     duration=DURATION, batch_size=BATCH_SIZE) for i in range(NTHREADS)]
  for writer in WRITERS:
    writer.start()
  if WRITERS: INTERVALS.start_interval()

def flush():
  global WRITERS
  for writer in WRITERS:
    print writer.flush()

def resume():
  global WRITERS, INTERVALS
  for writer in WRITERS:
    writer.unpause()
  if WRITERS: INTERVALS.start_interval()

def pause():
  global WRITERS, INTERVALS
  totals = []
  for writer in WRITERS:
    writer.pause()
    totals.append(writer.reset_stats())
  if WRITERS: 
    INTERVALS.end_interval(totals)

def stop():
  global WRITERS, INTERVALS
  totals = []
  for writer in WRITERS:
    writer.kill()
    totals.append(writer.reset_stats())
  if WRITERS: 
    INTERVALS.end_interval(totals)
  WRITERS = []

def status():
  global WRITERS, INTERVALS
  sub_totals = [writer.totals() for writer in WRITERS]
  for sub in sub_totals:
    print sub
  INTERVALS.print_history(sub_totals)

 
def streams():
  global WRITERS
  for writer in WRITERS:
    print writer


commands()
