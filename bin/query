#!/usr/bin/env python
#
# vim: filetype=python
#
# Copyright (c) 2013 Daniel Gardner
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish, dis-
# tribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the fol-
# lowing conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-
# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import simplejson, httplib, time
from threading import Thread

json = simplejson.dumps({
  "start_absolute": 1386047176988,
  "end_absolute": 1386047475932,
  "metrics": [
  {
    "tags": {
      "host": ["foo", "10.2.2.1"],
      "type": ["storage"]
    },
    "name": "disk_free"
  },
  {
    "tags": {
      "host": ["foo", "foo2"],
      "type": ["bar"]
    },
    "name": "xyz.123"
  }
  ]
})

class QueryRunner(Thread):
  def __init__(self, count):
    super(QueryRunner, self).__init__()
    self.count = count
    self.connection = httplib.HTTPConnection('amondawa.elasticbeanstalk.com', 80)

  def run(self):
    while self.count:
      t = time.time()
      self.connection.request("POST", '/api/v1/datapoints/query', json, 
          {'Content-Type': 'application/json'})
      response = self.connection.getresponse()
      response.read()
      print response.status, response.reason, time.time() - t
      self.count -= 1

for i in range(2):
  QueryRunner(500).start()
